tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: Meta-Llama-3.1-8B-Instruct/original/tokenizer.model #m must be downloaded

dataset:
  _component_: torchtune.datasets.chat_dataset
  source: json
  train_on_input: False
  data_files: # path to train sets (overridden with new files for each epoch, ran as sonsequitive jobs)
  conversation_style: openai
  split: train
  max_seq_len: 850
seed: 1234
shuffle: True


# Model Arguments
model:
  _component_: torchtune.models.llama3_1.llama3_1_8b

checkpointer:
  _component_: torchtune.utils.FullModelMetaCheckpointer
  checkpoint_dir: # path to base model to continue from (overridden with new files for each epoch, ran as sonsequitive jobs)
  checkpoint_files: [
    meta_model_0.pt # for the first epoch, consolidated.00.pth was renamed to meta_model_0.pt
  ]
  recipe_checkpoint: null
  output_dir: # path to a resulting model, where the next training round started from
  model_type: LLAMA3
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 8              # overridden with 20 whenever 80GB gpus were availible
epochs: 1

optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
  foreach: False

loss:
  _component_: torch.nn.CrossEntropyLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1


# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True
memory_efficient_fsdp_wrap: True

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
output_dir: # same as above + "/log"                    
log_every_n_steps: 1
log_peak_memory_stats: False